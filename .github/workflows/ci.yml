name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    name: Test
    runs-on: macos-15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '6.0'
        
    - name: Cache Swift packages
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-
          
    - name: Run tests
      run: swift test --enable-code-coverage
      
    - name: Generate code coverage report
      run: |
        xcrun llvm-cov export -format="lcov" \
          .build/debug/ContactScrubbyPackageTests.xctest/Contents/MacOS/ContactScrubbyPackageTests \
          -instr-profile .build/debug/codecov/default.profdata > coverage.lcov
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.lcov
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: macos-15
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '6.0'
        
    - name: Cache Swift packages
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-
          
    - name: Build debug
      run: swift build
      
    - name: Build release
      run: swift build -c release
      
    - name: Test executable
      run: |
        .build/release/contactscrub --help
        .build/release/contactscrub --version
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: contactscrub-${{ github.sha }}
        path: .build/release/contactscrub
        retention-days: 7

  lint:
    name: Lint
    runs-on: macos-15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '6.0'
        
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Run SwiftLint
      run: swiftlint --strict
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: macos-15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        # Check for common security issues
        echo "Checking for potential security issues..."
        
        # Check for hardcoded secrets (basic scan)
        if grep -r -i "password\|secret\|key\|token" --include="*.swift" Sources/ Tests/ || true; then
          echo "⚠️  Found potential secrets in code - please review"
        fi
        
        # Check for TODO/FIXME security items
        if grep -r -i "todo.*security\|fixme.*security" --include="*.swift" Sources/ Tests/ || true; then
          echo "⚠️  Found security-related TODO/FIXME items"
        fi
        
        echo "✅ Basic security scan completed"

  documentation:
    name: Generate Documentation
    runs-on: macos-15
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '6.0'
        
    - name: Cache Swift packages
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-
          
    - name: Build documentation
      run: |
        # Generate DocC documentation using xcodebuild
        xcodebuild docbuild \
          -scheme contactscrub \
          -destination "generic/platform=macOS" \
          -derivedDataPath docs-build
          
        # Convert .doccarchive to static hosting format
        $(xcrun --find docc) process-archive \
          transform-for-static-hosting \
          docs-build/Build/Products/Debug/contactscrub.doccarchive \
          --output-path docs \
          --hosting-base-path ContactScrubby
          
    - name: Upload documentation artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/
        retention-days: 1
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/
        
    - name: Deploy to Pages
      id: deployment
      uses: actions/deploy-pages@v4

  release:
    name: Release
    runs-on: macos-15
    needs: [test, build, lint]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '6.0'
        
    - name: Build release binary
      run: swift build -c release
      
    - name: Create release archive
      run: |
        mkdir -p release
        cp .build/release/contactscrub release/
        cp README.md release/
        cp LICENSE release/
        tar -czf contactscrub-${{ github.event.release.tag_name }}-macos.tar.gz -C release .
        
    - name: Upload release assets
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./contactscrub-${{ github.event.release.tag_name }}-macos.tar.gz
        asset_name: contactscrub-${{ github.event.release.tag_name }}-macos.tar.gz
        tag: ${{ github.ref }}
        overwrite: true
        
    - name: Create Homebrew formula
      run: |
        echo "Creating Homebrew formula..."
        ARCHIVE_URL="https://github.com/thieso2/ContactScrubby/releases/download/${{ github.event.release.tag_name }}/contactscrub-${{ github.event.release.tag_name }}-macos.tar.gz"
        ARCHIVE_SHA256=$(shasum -a 256 contactscrub-${{ github.event.release.tag_name }}-macos.tar.gz | cut -d' ' -f1)
        
        cat > contactscrub.rb << EOF
        class Contactscrub < Formula
          desc "A powerful contact scrubbing and management tool for macOS"
          homepage "https://github.com/thieso2/ContactScrubby"
          url "$ARCHIVE_URL"
          sha256 "$ARCHIVE_SHA256"
          version "${{ github.event.release.tag_name }}"
          
          depends_on :macos
          
          def install
            bin.install "contactscrub"
            doc.install "README.md"
          end
          
          test do
            assert_match version.to_s, shell_output("#{bin}/contactscrub --version")
          end
        end
        EOF
        
    - name: Upload Homebrew formula
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./contactscrub.rb
        asset_name: contactscrub.rb
        tag: ${{ github.ref }}
        overwrite: true